import asyncio
import schedule
from datetime import datetime

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, CommandStart

from config import TIME, EXCEL_PATH
from excel_processing.read_excel import read_product_ids_from_excel
from wb_parser import get_root_id, get_product_name, get_feedbacks, get_item_id, unique_values

router = Router()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
async def notify_negative_reviews(message: types.Message):
    # —á—Ç–µ–Ω–∏–µ —ç–∫—Å–µ–ª—å —Ñ–∞–π–ª–∞ —Å SKU
    product_ids = read_product_ids_from_excel(EXCEL_PATH)
    for product_id in product_ids:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        url = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"
        product_name = get_product_name(url)
        sku = get_item_id(url)
        feedback_list = unique_values(url)

        if not len(feedback_list) == 0:
            await message.answer(f'–¢–æ–≤–∞—Ä "{product_name}" –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ {len(feedback_list)}')
            for feedback in feedback_list:
                feedback_rating = feedback["feedback_rating"]
                negative_review_text = feedback["feedback"]
                rating = feedback["product_rating"]

                await message.answer(
                    f'–û—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä "{product_name}" (SKU: {sku})\n\n'
                    f'üåü –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞: {feedback_rating}\n\n'
                    '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: '
                    f'{negative_review_text}\n\n'
                    f'–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {rating}/5.0\n'
                )

                await asyncio.sleep(3)
        else:
            await message.answer(f"–ù–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç –Ω–∞ —Ç–æ–≤–∞—Ä {product_name}")


    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    print("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤", datetime.now())


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—É—Ç–∏–Ω –∑–∞–¥–∞—á–∏
# def run_daily_job(message):
#     loop = asyncio.new_event_loop()
#     asyncio.set_event_loop(loop)
#     asyncio.run_coroutine_threadsafe(notify_negative_reviews(message), loop)
async def async_job_wrapper(message):
    await notify_negative_reviews(message)


def async_scheduler(message):
    loop = asyncio.get_event_loop()
    loop.create_task(async_job_wrapper(message))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É /start —Ä–∞–Ω–µ–µ
    if user_state.get(user_id) is None:
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start
        user_state[user_id] = True
        # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–∑ –¢–ó. –í –≥—Ä—É–ø–ø—É –¢–µ–ª–µ–≥—Ä–∞–º–º —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ Wildberries.\n\n"
            f"–Ø —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞—é, –≤ —ç—Ç–æ –≤—Ä–µ–º—è {TIME} —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        schedule.every().day.at(TIME).do(async_scheduler, message=message)

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        while True:
            schedule.run_pending()
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    else:
        await message.answer(
            f"–Ø —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞—é, –≤ —ç—Ç–æ –≤—Ä–µ–º—è {TIME} —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
        )




